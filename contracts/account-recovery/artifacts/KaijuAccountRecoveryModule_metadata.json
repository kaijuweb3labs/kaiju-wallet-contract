{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IGuardianStorage",
						"name": "_guardianStorage",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_recoveryPeriod",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "guardian",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "threshold",
						"type": "uint256"
					}
				],
				"name": "GuardianAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "guardian",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "threshold",
						"type": "uint256"
					}
				],
				"name": "GuardianRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					}
				],
				"name": "RecoveryCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address[]",
						"name": "newOwners",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newThreshold",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "executeAfter",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "guardiansApprovalCount",
						"type": "uint256"
					}
				],
				"name": "RecoveryExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address[]",
						"name": "newOwners",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newThreshold",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					}
				],
				"name": "RecoveryFinalized",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "EXECUTE_RECOVERY_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "NAME",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_guardian",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "addGuardianWithThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "cancelRecovery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "changeThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_execute",
						"type": "bool"
					}
				],
				"name": "confirmRecovery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "domainSeparator",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_nonce",
						"type": "uint256"
					}
				],
				"name": "encodeRecoveryData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					}
				],
				"name": "executeRecovery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "finalizeRecovery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getChainId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "getGuardians",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "_guardians",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "getNonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_nonce",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					}
				],
				"name": "getRecoveryApprovals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "approvalCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_nonce",
						"type": "uint256"
					}
				],
				"name": "getRecoveryHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "getRecoveryRequest",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "guardiansApprovalCount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "newThreshold",
								"type": "uint256"
							},
							{
								"internalType": "uint64",
								"name": "executeAfter",
								"type": "uint64"
							},
							{
								"internalType": "address[]",
								"name": "newOwners",
								"type": "address[]"
							}
						],
						"internalType": "struct RecoveryRequestManager.RecoveryRequest",
						"name": "request",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "guardiansCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_count",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_guardian",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					}
				],
				"name": "hasGuardianApproved",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_guardian",
						"type": "address"
					}
				],
				"name": "isGuardian",
				"outputs": [
					{
						"internalType": "bool",
						"name": "_isGuardian",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_newOwners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_newThreshold",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct KaijuAccountRecoveryModule.SignatureData[]",
						"name": "_signatures",
						"type": "tuple[]"
					},
					{
						"internalType": "bool",
						"name": "_execute",
						"type": "bool"
					}
				],
				"name": "multiConfirmRecovery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_prevGuardian",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_guardian",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "revokeGuardianWithThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					}
				],
				"name": "threshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_signHash",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "validateGuardianSignature",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addGuardianWithThreshold(address,address,uint256)": {
					"params": {
						"_guardian": "The guardian to add.",
						"_threshold": "The new threshold that will be set after addition.",
						"_wallet": "The target wallet."
					}
				},
				"cancelRecovery(address)": {
					"params": {
						"_wallet": "wallet to recover"
					}
				},
				"changeThreshold(address,uint256)": {
					"params": {
						"_threshold": "The new threshold that will be set after execution of revokation.",
						"_wallet": "The target wallet."
					}
				},
				"confirmRecovery(address,address[],uint256,bool)": {
					"params": {
						"_execute": "Recovery process will execute if this parameter true and threshold is satisfied",
						"_newOwners": "new owner's of wallet.",
						"_newThreshold": "The new owner threshold for safe transaction.",
						"_wallet": "recovery wallet."
					}
				},
				"encodeRecoveryData(address,address[],uint256,uint256)": {
					"details": "Returns the bytes that are hashed to be signed by guardians."
				},
				"finalizeRecovery(address)": {
					"params": {
						"_wallet": "The target wallet."
					}
				},
				"getChainId()": {
					"details": "Returns the chain id used by this contract."
				},
				"getGuardians(address)": {
					"params": {
						"_wallet": "The target wallet."
					},
					"returns": {
						"_guardians": "the active guardians for a wallet."
					}
				},
				"getNonce(address)": {
					"params": {
						"_wallet": "The target wallet."
					},
					"returns": {
						"_nonce": "the nonce for this wallet."
					}
				},
				"getRecoveryApprovals(address,address[],uint256)": {
					"params": {
						"_newOwners": "new owner's of wallet.",
						"_newThreshold": "The new owner threshold for safe transaction.",
						"_wallet": "recovery wallet."
					},
					"returns": {
						"approvalCount": "The wallet's current recovery request"
					}
				},
				"getRecoveryHash(address,address[],uint256,uint256)": {
					"details": "Generates the recovery hash that should be signed by the guardian to authorize a recovery"
				},
				"getRecoveryRequest(address)": {
					"params": {
						"_wallet": "The target wallet."
					},
					"returns": {
						"request": "The wallet's current recovery request"
					}
				},
				"guardiansCount(address)": {
					"params": {
						"_wallet": "The target wallet."
					},
					"returns": {
						"_count": "The number of active guardians for a wallet."
					}
				},
				"hasGuardianApproved(address,address,address[],uint256)": {
					"params": {
						"_guardian": "The guardian.",
						"_newOwners": "new owner's of wallet.",
						"_newThreshold": "The new owner threshold for safe transaction.",
						"_wallet": "recovery wallet."
					},
					"returns": {
						"_0": "approvalCount The wallet's current recovery request"
					}
				},
				"isGuardian(address,address)": {
					"params": {
						"_guardian": "The address to check.",
						"_wallet": "The target wallet."
					},
					"returns": {
						"_isGuardian": "`true` if the address is a guardian for the wallet otherwise `false`."
					}
				},
				"multiConfirmRecovery(address,address[],uint256,(address,bytes)[],bool)": {
					"params": {
						"_execute": "Recovery process will execute if this parameter true and threshold is satisfied",
						"_newOwners": "new owner's of wallet.",
						"_newThreshold": "The new owner threshold for safe transaction.",
						"_signatures": "The guardians signatures.",
						"_wallet": "recovery wallet."
					}
				},
				"revokeGuardianWithThreshold(address,address,address,uint256)": {
					"params": {
						"_guardian": "The guardian to revoke.",
						"_prevGuardian": "The previous guardian linking to the guardian in the linked list.",
						"_threshold": "The new threshold that will be set after execution of revokation.",
						"_wallet": "The target wallet."
					}
				},
				"threshold(address)": {
					"details": "Retrieves the wallet threshold count.",
					"params": {
						"_wallet": "The target wallet."
					},
					"returns": {
						"_threshold": "Threshold count."
					}
				},
				"validateGuardianSignature(address,bytes32,address,bytes)": {
					"details": "checks if valid signature to the provided signer, and if this signer is indeed a guardian, revert otherwise"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addGuardianWithThreshold(address,address,uint256)": {
					"notice": "Lets the owner add a guardian for its wallet."
				},
				"cancelRecovery(address)": {
					"notice": "Owner can call this method to cancel ongoing recovery request"
				},
				"changeThreshold(address,uint256)": {
					"notice": "Lets the owner change the guardian threshold required to initiate a recovery."
				},
				"confirmRecovery(address,address[],uint256,bool)": {
					"notice": "Guardian should call this method to accept recovery request."
				},
				"finalizeRecovery(address)": {
					"notice": "Public method to finalize recovery request after recovery period"
				},
				"getGuardians(address)": {
					"notice": "Get the active guardians for a wallet."
				},
				"getNonce(address)": {
					"notice": "Get the module nonce for a wallet."
				},
				"getRecoveryApprovals(address,address[],uint256)": {
					"notice": "Get recovery approval count"
				},
				"getRecoveryRequest(address)": {
					"notice": "Retrieves the wallet's current ongoing recovery request."
				},
				"guardiansCount(address)": {
					"notice": "Counts the number of active guardians for a wallet."
				},
				"hasGuardianApproved(address,address,address[],uint256)": {
					"notice": "Get guardian approval state"
				},
				"isGuardian(address,address)": {
					"notice": "Checks if an address is a guardian for a wallet."
				},
				"multiConfirmRecovery(address,address[],uint256,(address,bytes)[],bool)": {
					"notice": "Accept all guardian recovery requests at once"
				},
				"revokeGuardianWithThreshold(address,address,address,uint256)": {
					"notice": "Lets the owner revoke a guardian from its wallet."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/account-recovery/KaijuAccountRecoveryModule.sol": "KaijuAccountRecoveryModule"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@gnosis.pm/safe-contracts/contracts/Safe.sol": {
			"keccak256": "0xfe09ad8ce3359ee997c4127c14264a94ec6f25dea38dc37997bd705e9aed9fcd",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://434e77c4ace5cefcf5a21af7eceb5b60ca45b55818e1ecf938d196345731c5e9",
				"dweb:/ipfs/QmbYFyE4okvruZZuCxeNy86Hm6W7yPR4yJWkVztbPRTosu"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/base/Executor.sol": {
			"keccak256": "0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://710022b40c9f78a5b55b97f6ce600e4834df2ddd36bf714974d953883c82d58c",
				"dweb:/ipfs/QmbdJNKH5opevm7HxQKQAe6W7dQTgSHKa4nKvbUNGRcQQp"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol": {
			"keccak256": "0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://7975be46d228510c70659b18076aecb3b0e7331b4d3a162444304145143bdc6e",
				"dweb:/ipfs/QmRRbZrWUnoky6pVo8zMUzCTsshR4sZ2FjR13s8vyAb8dV"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol": {
			"keccak256": "0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://3ff8a4194d1160d2e23142937bc9d7eac7b6b553b1ee226390a0df07ebac1b64",
				"dweb:/ipfs/QmSw8Y7z4TQrUTEosdWqcug7TUv9Tg1kxqMKHd7RuTnyzx"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol": {
			"keccak256": "0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://30812896d9f57cae84a432c67fbb3007d566071ec203b2992f1c0f762722df0d",
				"dweb:/ipfs/QmRyJ3JbsUwDQxQDTrqDDX4qNtVu7XiW8cD8WP5kgNJGGz"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol": {
			"keccak256": "0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://5729c58b14e7b656c71dd3377e9519c0d34ef8c04851a9a21c3d62393e4fae7a",
				"dweb:/ipfs/QmRRtfFpNqvdANny9TYBr8rA3HbT1egUCpb2uXALMHkVxK"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
			"keccak256": "0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://385929800d1c0f92eb165fcf37a9e28b395b17d8b74f74755654d3a096a0fc34",
				"dweb:/ipfs/QmagieLuN2jrp2oJHFyZuyz65Sh1CcupnXSEKypGFS5Gvo"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol": {
			"keccak256": "0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://740a729397b6a0d903f4738a50e856d4e5039555024937b148d97529525dbfa9",
				"dweb:/ipfs/QmQJuNVvHbkeJ6jjd75D8FsZBPXH6neoGBZdQgtsA82E7g"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol": {
			"keccak256": "0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://c26495b1fe9229ea17f90b70f295030880d629b9ea3016ea20b634983865f7b3",
				"dweb:/ipfs/QmTc1UmKcynkKn8DeviLMuy6scxNvAVSdLoX4ndUtdEL9N"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol": {
			"keccak256": "0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://8e9a317f0c3c02ab1d6c38039bff2b3e0c97f4dc9d229d3d9149c1af1c5023b3",
				"dweb:/ipfs/QmNcZjNChsuXF34T6f3Zu7i3tnqvKN4NyWBWZ4tXLH9kMu"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol": {
			"keccak256": "0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://00cdded3068b9051ee0a966f40926fbc57dbe7ef8bf4285db3740f9d50468c80",
				"dweb:/ipfs/QmcP5hKmaRqBe7TpgoXtncZqsNKKdCCKxZgXoxEL4Nj5F4"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/Singleton.sol": {
			"keccak256": "0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://dd1c31d5787ef590a60f6b0dbc74d09e6fe4d3ad2f0529940d662bf315521cde",
				"dweb:/ipfs/QmSAS5DYrGksJe4cPQ4wLrveXa1CjxAuEiohcLpPG5h2bo"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol": {
			"keccak256": "0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://e775f267d3e60ebe452d9533f46a0eb1f1dc4593d1bcb553e86cea205a5f361e",
				"dweb:/ipfs/QmQdYDHGQsiMx1AADWRhX7tduU9ycTzrT5q3zBWvphXzKZ"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/external/SafeMath.sol": {
			"keccak256": "0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://351c66e5fe92c0a51f79d133521545dabdd3f756312a7b1428c1fc813c512a1c",
				"dweb:/ipfs/QmdnrRmgef8SdamEU6fVEqFD5RQwXeDFTfQuZEfX2vxC4x"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89",
				"dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38"
			]
		},
		"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol": {
			"keccak256": "0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://3c4a1371948b11f78171bc4ae4fd169a1eec11e5c4b273eb2c54bc030a1aae25",
				"dweb:/ipfs/QmPuztatXZYVS65n8YbCyccJFZYPP6zQfBQ8tTY27pB978"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
			"license": "MIT",
			"urls": [
				"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
				"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2",
				"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
			"keccak256": "0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80",
			"license": "MIT",
			"urls": [
				"bzz-raw://77d1f1cf302cd5e1dfbbb4ce3b281b28e8c52942d4319fce43df2e1b6f02a52d",
				"dweb:/ipfs/QmT6ZXStmK3Knhh9BokeVHQ9HXTBZNgL3Eb1ar1cYg1hWy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"contracts/account-recovery/KaijuAccountRecoveryModule.sol": {
			"keccak256": "0xc2a8f8b965af52d29d065e5b617d31cecbee90e9c6b7f94db3458ba0ec7af459",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8ace7fe92fc0793e0d919c64896ba205ae0d8cde30b2e8064b71aae722c7cb5b",
				"dweb:/ipfs/QmPcbkRYA9CCnVA8Hp9mJcy4Ur5917JAoavT3zFg8wcVDP"
			]
		},
		"contracts/account-recovery/core/Authorized.sol": {
			"keccak256": "0x6c165c23f66300dc27dfaa3bddca631592f6696234353dcdad5471fdf6906a51",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://a8a7e1dc8a8305cce340747c0ace9085e75616217179d0a6d695f58f5ab57c03",
				"dweb:/ipfs/QmbJpZoxnMwbQZWxs2NdRsRxHfUAM7moJHp5ysQnuDM4U4"
			]
		},
		"contracts/account-recovery/core/GuardianManager.sol": {
			"keccak256": "0x64915e7a22e32deca0f41f1116313119383e23cfab5596cdbe464c80d4bf6b1b",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d85f5ad448ea06ab9afe515dce174ea305632165a06c19d97b5d4cd28315e741",
				"dweb:/ipfs/QmVZqrJYf734NDErau999xETK5L3FQh4nD6tbEBJnMBzkr"
			]
		},
		"contracts/account-recovery/core/ModuleMetadata.sol": {
			"keccak256": "0x19d7d598cb6aa4671c3f3a863bba7c734d4054d85a033368bb2c4ee5eb1437e6",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://6f26c514ba5cbf275aa625e8a55c337e3bcb4f49f3c6d36f9268549ae29f34ba",
				"dweb:/ipfs/QmZUABJTcs7rqEse8zsGpjKHKG7TH9QyrAztQKKD4pZFBh"
			]
		},
		"contracts/account-recovery/core/NonceManager.sol": {
			"keccak256": "0x2fbffcd9fa04425e3c071be63349440f8688733f93044c4438da29e6fd8f62dc",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://0c96866ade1ebd91d1faa3564e358e8c1356fae9611fda7a116a6c145011f248",
				"dweb:/ipfs/QmUbeerzsoeLhS82KudkmAkiYvXzzyXU2TxPVbzKb7WWjt"
			]
		},
		"contracts/account-recovery/core/RecoveryRequestManager.sol": {
			"keccak256": "0x25e0a43e383899961d95f26cdac14973b5769df09c2b6bac0da7aa3a01a086ec",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://0420a291b8e9f91d27060aa427104fd5a6973d72987be73fe98238e3599ab7c1",
				"dweb:/ipfs/QmavRGFW2t9K7ypEZY6sV8LhsMkWbu4S8JxGHDjNtR9Frh"
			]
		},
		"contracts/account-recovery/storage/IGuardianStorage.sol": {
			"keccak256": "0x11fc277450d40b8596a0a915e7aa18345e2bb4e1be94a68ed25f2a66017217c3",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://7cb721f5062a3f9e3b8dc2e3834d6c4e5433514165507450a0c9d8aeaadcb51d",
				"dweb:/ipfs/QmecSnBVg4BgAJ4dDEaUAjqwViUvNNTouqn5Jtkpj9WhMa"
			]
		}
	},
	"version": 1
}